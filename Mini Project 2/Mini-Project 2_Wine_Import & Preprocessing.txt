# COMP-551 Mini-Project #2.
# Written by Ryan Wilson.
# Encoding = UTF-8.

# Import pandas, numpy and matplotlib.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Import preprocessing & classifier modules from scikit-learn.
from sklearn.datasets import fetch_openml
from sklearn.preprocessing import normalize
from sklearn.metrics import mean_squared_error
from sklearn.utils import resample

# Import summary stats module from scipy.
from scipy import stats

#########################################################################
##########          IMPORT & DATAFRAME INITIALIZATION          ##########
#########################################################################

# Load iris dataset from sklearn.
data = fetch_openml(name='wine-quality-white')

# Print full description of dataset.
# pylint: disable=E1101
print(data.DESCR)
print()

# Initialize dataframe & set feature and target arrays to X & Y.
df = pd.DataFrame(data = np.c_[data['data'], data['target']], \
    columns = data['feature_names'] + ['Class'])
df.to_csv('d:/PhD Thesis/Courses/COMP 551/Python/Python Files/Mini-Project 2/df_wine.csv', index = True)

X = df.iloc[:, :-1].astype(float)
Y = df.iloc[:, -1].astype(float)

# Set up print formatting options (adjust significant digits).
np.set_printoptions(formatter={'float': '{:0.4f}'.format})

# Print dataframes to ensure proper import.
print("Feature Data (X):")
print(X)
print()

print("Target Data (Y):")
print(Y)
print()

#########################################################################
#################          DATA PREPROCESSING          ##################
#########################################################################

# Mean-center each variable (features & target) by column.
X_mean = X.mean(axis=0)
Y_mean = Y.mean(axis=0)

X_centered = X - X_mean
Y_centered = Y - Y_mean

# Re-scale each variable by setting L2-norm to 1 (column-wise).
X_norm_fn = np.sqrt(np.sum(np.square(X_centered), axis=0))
Y_norm_fn = np.sqrt(np.sum(np.square(Y_centered), axis=0))

X_norm = X_centered / X_norm_fn
Y_norm = Y_centered / Y_norm_fn

# Impute NaNs (generated by preprocessing) with null values.
X_norm = X_norm.fillna(0)
Y_norm = Y_norm.fillna(0)

X_norm.to_csv('d:/PhD Thesis/Courses/COMP 551/Python/Python Files/Mini-Project 2/df_wine_X-norm.csv', index = True)
Y_norm.to_csv('d:/PhD Thesis/Courses/COMP 551/Python/Python Files/Mini-Project 2/df_wine_Y-norm.csv', index = True)

# Preview the preprocessed data to ensure proper scaling.
print("Feature Data X_norm (re-scaled):")
print(X_norm)
print()

print("Target Data Y_norm (re-scaled):")
print(Y_norm)
print()